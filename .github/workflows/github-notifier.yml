name: Notify

on:
  schedule:
    - cron: '0 7,15 * * *'  # Запуск каждый день по UTC
  workflow_dispatch:     # Возможность ручного запуска

jobs:
  loop-job:
    runs-on: ubuntu-latest
    env:
      NOTIFIER_ENABLED: ${{ secrets.NOTIFIER_ENABLED }}  # Включение/выключение уведомлений через секрет
    steps:
      - name: Установка jq (если отсутствует)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Генерация сообщения через Hugging Face AI
        if: ${{ env.NOTIFIER_ENABLED == 'true' }}
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # Токен Hugging Face из секретов
        run: |
          MODEL_NAME="sberbank-ai/rugpt3medium_based_on_gpt2"  # Используемая модель
          PROMPT="Ты — руководитель команды разработки, который любит играть иногда хорошего полицейского, а иногда плохого (случайно). Напиши сообщение в Telegram, спрашивающее о статусе задач у незадачливого подчинённого с ником @SenchinYB, заодно пожелай хорошего дня, утра или вечера, в зависимости от текущего времени."

          # Отладка: проверяем начало токена (без полного раскрытия)
          echo "HUGGINGFACE_API_KEY starts with: ${HUGGINGFACE_API_KEY:0:3}"

          # Проверка наличия токена
          if [ -z "$HUGGINGFACE_API_KEY" ]; then
            echo "HUGGINGFACE_API_KEY не задан, использование резервного сообщения"
            echo "MESSAGE=Ошибка: токен не задан" >> $GITHUB_ENV
            exit 0
          fi

          # Выводим информацию о запросе для отладки
          echo "API URL: https://api-inference.huggingface.co/models/${MODEL_NAME}"
          echo "Headers: Content-Type: application/json, Authorization: Bearer [скрыто]"

          # Выполняем запрос к API и сохраняем статус и тело ответа
          RESPONSE=$(curl -s -w "%{http_code}" -X POST "https://api-inference.huggingface.co/models/${MODEL_NAME}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $HUGGINGFACE_API_KEY" \
            -d "{\"inputs\": \"${PROMPT}\", \"parameters\": {\"max_new_tokens\": 100, \"temperature\": 0.7}}")

          HTTP_STATUS=${RESPONSE: -3}  # HTTP-код (последние 3 символа)
          RESPONSE_JSON=${RESPONSE:0:${#RESPONSE}-3}  # Тело ответа

          echo "HTTP Status: $HTTP_STATUS"
          echo "DEBUG: API response: $RESPONSE_JSON"

          # Обработка ответа в зависимости от HTTP-статуса
          if [ "$HTTP_STATUS" -eq 200 ]; then
            # Проверяем, является ли ответ валидным JSON
            if echo "$RESPONSE_JSON" | jq . > /dev/null 2>&1; then
              ERROR=$(echo "$RESPONSE_JSON" | jq -r '.error // empty')
              if [ -n "$ERROR" ]; then
                echo "Ошибка API: $ERROR. Используем резервное сообщение." >&2
                RESPONSE="Ошибка: $ERROR"
              else
                RESPONSE=$(echo "$RESPONSE_JSON" | jq -r '.[0].generated_text')
                RESPONSE="${RESPONSE#${PROMPT}}"  # Убираем промпт из ответа
                RESPONSE=$(echo "$RESPONSE" | sed 's/^ *//')  # Убираем лишние пробелы
                if [ -z "$RESPONSE" ]; then
                  RESPONSE="Ошибка: пустой ответ от модели"
                else
                  # Экранирование символов для MarkdownV2 в Telegram
                  RESPONSE=$(echo "$RESPONSE" | sed 's/!/\\!/g; s/\./\\./g; s/_/\\_/g; s/-/\\-/g; s/(/\\(/g; s/)/\\)/g')
                fi
              fi
            else
              echo "Ошибка: API вернул невалидный JSON: $RESPONSE_JSON" >&2
              RESPONSE="Ошибка: невалидный ответ от API"
            fi
          else
            echo "Ошибка: HTTP статус $HTTP_STATUS" >&2
            RESPONSE="Ошибка: HTTP $HTTP_STATUS"
          fi

          echo "DEBUG: Processed response: $RESPONSE"
          echo "MESSAGE=$RESPONSE" >> $GITHUB_ENV

      - name: Notify
        if: ${{ env.NOTIFIER_ENABLED == 'true' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}    # Токен Telegram-бота
          TELEGRAM_CHAT_ID: ${{ secrets.ECC_TG_CHAT_ID }}   # ID чата для уведомлений
        run: |
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="$MESSAGE" \
            -d parse_mode=MarkdownV2 || echo "Ошибка отправки в Telegram: $MESSAGE"